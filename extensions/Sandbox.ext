-- This file sets a whitelist of allowed functions
-- when SafeMode is active
-- Reference: http://lua-users.org/wiki/SandBoxes

sandbox_env = {
    -- LUA core functions
  ipairs = ipairs,
  next = next,
  pairs = pairs,
  pcall = pcall,
  tonumber = tonumber,
  tostring = tostring,
  type = type,
  unpack = unpack,
  print = print,
    -- LUA standard libraries
  coroutine = { create = coroutine.create,
        resume = coroutine.resume,
        running = coroutine.running,
        status = coroutine.status,
        wrap = coroutine.wrap },
  string = { byte = string.byte,
        char = string.char,
        find = string.find,
        format = string.format,
        gmatch = string.gmatch,
        gsub = string.gsub,
        len = string.len,
        lower = string.lower,
        match = string.match,
        rep = string.rep,
        reverse = string.reverse,
        sub = string.sub,
        upper = string.upper },
  table = { concat = table.concat,
        insert = table.insert,
        maxn = table.maxn,
        move = table.move,
        pack = table.pack,
        remove = table.remove,
        sort = table.sort,
        unpack = table.unpack },
  utf8 = { char = utf8.char,
        charpattern = utf8.charpattern,
        codes = utf8.codes,
        codepoint = utf8.codepoint,
        len = utf8.len,
        offset = utf8.offset },
  math = { abs = math.abs,
        acos = math.acos,
        asin = math.asin,
        atan = math.atan,
        atan2 = math.atan2,
        ceil = math.ceil,
        cos = math.cos,
        cosh = math.cosh,
        deg = math.deg,
        exp = math.exp,
        floor = math.floor,
        fmod = math.fmod,
        frexp = math.frexp,
        huge = math.huge,
        ldexp = math.ldexp,
        log = math.log,
        log10 = math.log10,
        max = math.max,
        min = math.min,
        modf = math.modf,
        pi = math.pi,
        pow = math.pow,
        rad = math.rad,
        random = math.random,
        randomseed = math.randomseed,
        sin = math.sin,
        sinh = math.sinh,
        sqrt = math.sqrt,
        tan = math.tan,
        tanh = math.tanh },
  os = { clock = os.clock,
        difftime = os.difftime,
        time = os.time },

    -- Server API - Global calls
    -- Thread safety and safemode sandbox are handled in c-closure callbacks (cf ElunaTemplate.h)
  RegisterServerEvent = RegisterServerEvent,
  RegisterPlayerEvent = RegisterPlayerEvent,
  RegisterGuildEvent = RegisterGuildEvent,
  RegisterGroupEvent = RegisterGroupEvent,
  RegisterCreatureEvent = RegisterCreatureEvent,
  RegisterUniqueCreatureEvent = RegisterUniqueCreatureEvent,
  RegisterCreatureGossipEvent = RegisterCreatureGossipEvent,
  RegisterGameObjectEvent = RegisterGameObjectEvent,
  RegisterGameObjectGossipEvent = RegisterGameObjectGossipEvent,
  RegisterItemEvent = RegisterItemEvent,
  RegisterItemGossipEvent = RegisterItemGossipEvent,
  RegisterPlayerGossipEvent = RegisterPlayerGossipEvent,
  RegisterBGEvent = RegisterBGEvent,
  RegisterMapEvent = RegisterMapEvent,
  RegisterInstanceEvent = RegisterInstanceEvent,
  ClearBattleGroundEvents = ClearBattleGroundEvents,
  ClearCreatureEvents = ClearCreatureEvents,
  ClearUniqueCreatureEvents = ClearUniqueCreatureEvents,
  ClearCreatureGossipEvents = ClearCreatureGossipEvents,
  ClearGameObjectEvents = ClearGameObjectEvents,
  ClearGameObjectGossipEvents = ClearGameObjectGossipEvents,
  ClearGroupEvents = ClearGroupEvents,
  ClearGuildEvents = ClearGuildEvents,
  ClearItemEvents = ClearItemEvents,
  ClearItemGossipEvents = ClearItemGossipEvents,
  ClearPlayerEvents = ClearPlayerEvents,
  ClearPlayerGossipEvents = ClearPlayerGossipEvents,
  ClearServerEvents = ClearServerEvents,
  ClearMapEvents = ClearMapEvents,
  ClearInstanceEvents = ClearInstanceEvents,
  GetMap = GetMap,
  GetLuaEngine = GetLuaEngine,
  GetCoreName = GetCoreName,
  GetCoreVersion = GetCoreVersion,
  GetCoreExpansion = GetCoreExpansion,
  GetQuest = GetQuest,
  GetPlayerByGUID = GetPlayerByGUID,
  GetPlayerByName = GetPlayerByName,
  GetGameTime = GetGameTime,
  GetPlayersInWorld = GetPlayersInWorld,
  GetGuildByName = GetGuildByName,
  GetGuildByLeaderGUID = GetGuildByLeaderGUID,
  GetPlayerCount = GetPlayerCount,
  GetPlayerGUID = GetPlayerGUID,
  GetItemGUID = GetItemGUID,
  GetObjectGUID = GetObjectGUID,
  GetUnitGUID = GetUnitGUID,
  GetGUIDLow = GetGUIDLow,
  GetGUIDType = GetGUIDType,
  GetGUIDEntry = GetGUIDEntry,
  GetAreaName = GetAreaName,
  bit_not = bit_not,
  bit_xor = bit_xor,
  bit_rshift = bit_rshift,
  bit_lshift = bit_lshift,
  bit_or = bit_or,
  bit_and = bit_and,
  GetItemLink = GetItemLink,
  GetMapById = GetMapById,
  GetCurrTime = GetCurrTime,
  GetTimeDiff = GetTimeDiff,
  PrintInfo = PrintInfo,
  PrintError = PrintError,
  PrintDebug = PrintDebug,
  IsInventoryPos = IsInventoryPos,
  IsEquipmentPos = IsEquipmentPos,
  IsBankPos = IsBankPos,
  IsBagPos = IsBagPos,
  ReloadEluna = ReloadEluna,
  SendWorldMessage = SendWorldMessage,
  WorldDBQuery = WorldDBQuery,
  WorldDBExecute = WorldDBExecute,
  CharDBQuery = CharDBQuery,
  CharDBExecute = CharDBExecute,
  AuthDBQuery = AuthDBQuery,
  AuthDBExecute = AuthDBExecute,
  CreateLuaEvent = CreateLuaEvent,
  RemoveEventById = RemoveEventById,
  RemoveEvents = RemoveEvents,
  CreatePacket = CreatePacket,
  AddVendorItem = AddVendorItem,
  VendorRemoveItem = VendorRemoveItem,
  VendorRemoveAllItems = VendorRemoveAllItems,
  SaveAllPlayers = SaveAllPlayers,
  SendMail = SendMail,
  AddTaxiPath = AddTaxiPath,
  UintNew = UintNew,
  UintToString = UintToString,
  UintToHex = UintToHex,
  StateChannelSend = StateChannelSend,
  StateChannelRegister = StateChannelRegister,
  StateChannelUnregister = StateChannelUnregister,

    -- Classes and methods are handled in c-closure callback (cf ElunaTemplate.h)
  Object = Object,
  WorldObject = WorldObject,
  Unit = Unit,
  Player = Player,
  Creature = Creature,
  GameObject = GameObject,
  Corpse = Corpse,
  Item = Item,
  Group = Group,
  Guild = Guild,
  Aura = Aura,
  Spell = Spell,
  Quest = Quest,
  Map = Map,
  AuctionHouseEntry = AuctionHouseEntry,
  BattleGround = BattleGround,
  WorldPacket = WorldPacket,
  ElunaQuery = ElunaQuery,
}
